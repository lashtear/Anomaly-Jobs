

Anomaly Jobs
-----------------------------------------------------------------------------
Superior Task Tracking Technology
Version 5.2 

Written by: Starfleet @ Anomaly (eye1movies@aol.com)
Maintained by: Halmar@Gamma One (grey419@gmail.com)
Contributors: Firestorm @ Ephemera (+myjobs, /tags) 
              Ian @ MUX (Pies), Minion @ Crossroads (Penn Compat)
Testers: nails@MUSHpark
         Sunshine@Ashes To Ashes
         Centauri & Pyxis@Rise From Chaos
         Minion & Duke@Outremer


Platforms supported: MUX 2.x, MUSH 3, PennMUSH 1.8.2, RhostMUSH
Requirements: Myrddin's BBS, @mail system.
									   
This code is provided as-is and expresses no guarantee or warranty. Use it
entirely at your own risk. Author is not liable for any damages, real or
implied. It is available free to benefit the online text game community at
large. 






Anomaly Jobs 5
-----------------------------------------------------------------------------
1. Installing Anomaly Jobs 5
2. Buckets
3. Getting Help
4. Integrating Applications with Jobs
5. +job/log - Log File
6. Automatic Logging
7. Max Jobs
8. Automatic Assignment
9. Access Configutation
10. Staff Checks



1. Installing Anomaly Jobs 5
-----------------------------------------------------------------------------
Installing Jobs 5 is fairly straight forward. You quote the install file to
your game and the install is automated. However, before you install it read
the README.<dist> file for your server for any notes, and read the install file
notes.

	IMPORTANT!
	
	* You should install this with a Wizard character, preferably in an
	  account that is not regularly logged into, as the code creates and
	  destroys objects dynamically. This can get spammy.
	  
	* Do not rename your jobs objects. Patch scripts depend on these names
	  in order to function.
	  
	* You should not be holding anything (exits, objects) or be inside a
	  room with a lot of exits. There are some organizational buckets that
	  may have the same name, and this will confuse the script.
	  
	* You must install using a timed delay. Most clients have an upload-
	  with-delay option. A delay of at least one second is recommended.
	  
	* Be patient. The install script will tell you when it is finished.
	  Don't try to do anything until install is complete.

This code REQUIRES Myrddin's BBS to be installed, as it uses the BBS to post
completed/approved/denied jobs to. So long as your BBS is unmodified it should
work without problems. There is no need to configure the BBS or create any
bboards, as it will work its magic automatically. It also requires hardcoded
@mail at this time. It will automatically set up two BBS boards to use with the
system - a public read-only BBS for game-wide progress tracking, and a private,
staff-only board for privately tracking player requests and other issues.

This script requires no modification so long as used on the servers listed
above and you want the behavior to be for staff-only.



2. Buckets
-----------------------------------------------------------------------------
Jobs are stored in buckets, which is a method of organization that keeps jobs
sorted in their proper locations. Jobs are parented to its bucket, allowing the
bucket settings to cascade down to job level.

The system has several buckets already installed, but you may wish to add more.
You can add buckets with the +bucket/add command (see the +help files).

ADMIN   General Administration issues.
APPS    Player Applications
BUILD   Building issues and typos (Required bucket).
CGEN    Character Generation issues.
CODE    For coding issues and bug reports (Required bucket).
FEEP    A hidden bucket for creeping features aka feeping creatures.
FORUM   A discussion forum.
PITCH   Plot and game idea pitches (Required bucket).
PUB     Public jobs (Jobs in bucket appear in everyone's +myjobs list).
QUERY   Player queries (Required bucket).
REQ     Player requests (Required bucket).
RP      Hidden bucket for storing future plots.
TECH    Technology issues, such as weapon object distribution, etc.
THEME   Game thematic issues.
TPS     Curringly running plots.

A bucket name is 1-5 letters long. WoD games might want to add VAMP, GAROU,
MAGE, FAE, etc.



3. Getting Help
-----------------------------------------------------------------------------
The primary location to get help and report bugs for Jobs 5 is the google 
code site at http://code.google.com/p/anomalyjobs/ If you wish to ask for
help log into puggy.mushpark.com 9033 and speak with Grey.



4. Integrating Applications with Jobs
-----------------------------------------------------------------------------
As an optional feature, you can post character application information to the
+jobs board, and have your approval queue attached to the board. However,
you must provide your own @trigger for TRIG_APPLY on the database object, run
when a new player finished character generation. This trigger puts a character
application into the Jobs system. To add this functionality to your game, you
must add the following code to your 'please approve me' command:

	@trigger <Job Database>/TRIG_APPLY=<player DB# to be approved>

To change the information presented to player upon application submission,
see the APPS bucket setup.



5. +job/log - Log File
-----------------------------------------------------------------------------
The LOGFILE attribute is the base name of the log file. You can
change the log file for each bucket, or change the following
LOGFILE attribute to change the default name.

NOTE: The following file must already exist on the server in order
for job logging to be successful:

/game/logs/M-<logfilename>.log



6. Automatic Logging
-----------------------------------------------------------------------------
Add the following to your system if you wish automatic logging:

&HOOK_APR Job Parent Object <JPO>=@trigger [v(VA)]/TRIG_LOG=%0,[v(VA)]
&HOOK_DEL Job Parent Object <JPO>=@trigger [v(VA)]/TRIG_LOG=%0,[v(VA)]
&HOOK_DNY Job Parent Object <JPO>=@trigger [v(VA)]/TRIG_LOG=%0,[v(VA)]
&HOOK_COM Job Parent Object <JPO>=@trigger [v(VA)]/TRIG_LOG=%0,[v(VA)]

Note that the logs must previously exist on the server before they
can be written to:
/game/logs/M-<logfile>.log

The two default <logfiles> are 'reqlog' (for all player +requests)
and 'joblog' (for all other buckets).



7. Max Jobs
-----------------------------------------------------------------------------
This attribute controls how many jobs are allowed in the system
before it halts new job creation. Try to keep this number
reasonable based on your game's size. A small game can stick with
200. Larger games may have to boost the number. However, keep in
mind that boosting it also decreases security, as twinks can
potentially spam the system through spurious job creation.

&MAX_JOBS Job Database <JD>=200



8. Automatic Assignment
-----------------------------------------------------------------------------
If you would like jobs to automatically assign a job to the
person who invoked /create, then set the following:

&HOOK_CRE Job Parent Object <JPO>=&ASSIGNED_TO %0=%1



9. Access Configutation
-----------------------------------------------------------------------------
The following attributes are located on the Jobs Database object and may be
modified to configure access to the system.

HAS_ACCESS      : Return 1 if player can access the +jobs code.
ADD_ACCESS      : Return 1 if player can /add to jobs.
APPROVE_ACCESS  : Return 1 if player can /approve jobs.
COMPLETE_ACCESS : Return 1 if player can /complete jobs.
CREATE_ACCESS   : Return 1 if player can /create jobs.
DENY_ACCESS     : Return 1 if player can /deny jobs.
EDIT_ACCESS     : Return 1 if player can edit a job.
GIVE_ACCESS     : Return 1 if player can +bucket/access.
LOG_ACCESS      : Return 1 if player can /log a job.
MAIL_ACCESS     : Return 1 if player can /mail regarding a job.
STATS_ACCESS    : Return 1 if player can get reports.
CONFIG_ACCESS   : Return 1 if player can use /sumset.


10. Staff Checks
-----------------------------------------------------------------------------
The following ufuncs on the Jobs Database are used to check if a player is
staff. They are tailored to each codebase.

FN_WIZONLY      : Return 1 if the player is a wizard or equivalent.
FN_STAFFALL     : Return 1 if the player is a wizard or royalty, or equivalent.

