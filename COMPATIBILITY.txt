Developer notes on cross-platform compatibility
-----------------------------------------------

This document is intended to highlight differences in supported servers
and identify standard coding practices to avoid compatibility issues.

1. Treatment of empty attributes

MUX evaluates hasattr() on an empty attribute (e.g., "&FOO me=") as 0, while
PennMUSH returns 1. PennMUSH requires hasattrval() for the same behavior.
%va/FN_HASATTR and %va/FN_HASATTRP resolve this difference.

2. Math issues

In many math functions, TinyMUSH and MUX treat a space as zero (e.g., 
add(1,) --> 1); PennMUSH treats it as null (--> #-1 ARGUMENTS MUST BE NUMBERS).
Always explicitly use 0 in math functions (or base case for fold.) 

In MUX, div(foo,bar) accepts floating point arguments and returns an integer.
In PennMUSH the arguments must also be integers. round(fdiv(foo,bar),0) works,
as does using round() or trunc() on the arguments before using div(), although
the former is less subject to intermediate roundoff errors.

3. String / delimiter issues

In sort(), iter(), and other functions with an output delimiter, TinyMUSH and 
MUX treat a space as a real space (e.g., sort(3 2 1,n, , ) --> 1 2 3); 
PennMUSH treats it as null (--> 123).  Always explicitly identify spaces used
as delimiters with %b.

PennMUSH and MUX operate identically on single-argument trim(foo), but have 
different order of second and third arguments (delimiter & left or right).
Default Penn trim() behavior matches MUX but can be configured otherwise.  
While trim() will work cross-platform if only one argument is included, for 
consistency use %va/FN_TRIM.

Many PennMUSH functions which operate on strings (e.g., ansi(), pemit(), etc.) 
do not require commas in the second argument to be escaped.  To retain MUX
compatibility, escape commas in strings: ansi(h,foo,bar) --> ansi(h,foo\,bar)

MUX doesn't care about negative integers on repeat(). Rhost and Penn do. Use
max(0,<calculation>) if it's possible the calculation will be negative.

4. Attribute sorting

MUX stores attributes by creation time. PennMUSH stores attributes in an
alphabetically-sorted list.  When attribute order matters (e.g., list of 
comments) use a sort.

5. Non-existent functions

MUX columns() --> no direct equivalent in Penn. Alternate code using align()
is installed in %va/FN_COLUMNS.  Use table() if no indent required.

MUX strtrunc() --> Penn left().  Installed in %va/FN_STRTRUNC

MUX pack() --> no direct Penn equivalent. Baseconv() is probably sufficient
but uses a different encoding string.  %va/FN_PACK implements MUX version.

MUX & Penn itemize() --> Rhost elist() with different order of arguments.
Installed in %va/FN_ITEMIZE which also calls FN_PRETTY as a final backup.

MUX & Rhost ladd(<foo>) --> Penn has lmath(add,<foo>). Use %va/FN_LADD. 

6. Misc. functions/flags

MUX: HALTED --> Penn: HALT (HALT is cross-platform)
MUX: @lock/speechlock --> Penn: @lock/speech (@lock/speech is cross-platform)
MUX: royalty flag = Z --> Penn: royalty flag = r.  Use hasflag(royalty)
TinyMUSH: COMMANDS --> Penn: !NO_COMMAND; MUX: either.
MUX: Colors with %x --> Penn: ansi()  (ansi() is cross-platform)
Current servers: %i0.  --> Old servers: itext(0).
MUX: search() may fail on large chunks.  Do not do searches with results that
	may exceed buffer size (approx 1000 dbrefs).
Rhost: evaluating search() works without [ ], does not work with.
MUX: Desc --> Penn: DESCRIBE (Desc is cross-platform)
MUX: wrap() arguments differ from Penn.  Generic FN_WRAP conversion for all 8
	arguments is possible but impractical; better to code alternate versions 
	with fewer arguments for specific desired formats.
MUX: map() has @@ null delimiter. Penn, leave blank. Rhost doesn't allow. If
	output is needed, use an iter. If output suppressed, wrap in a null().
Rhost: lcon() returns #-1 if the object is empty.  words(lcon()) is not a
  reliable means of detecting emptiness.
Rhost: children() returns #-1 if no children. Don't words() it either.
Rhost: if() on Rhost does not return true for a valid dbref. Use if(t(dbref)).

7. Queue

MUX: Permits fractional-second @wait. Processes @tr's (puts on queue with
evaluation of current state of attributes) before processing additional 
commands in the original thread which might change the attributes.

Penn: @wait must be integer. @tr's take a queue cycle and might not be 
processed before additional commands in the earlier thread change attributes.
Use long enough @waits for the @tr's to propogate, or pass any needed values
as arguments to the @tr.

@wait me={foo};@notify me is subject to interference/mis-synchronization with
multiple simultaneous uses of the same object during the @wait, and/or a
coding error causing a stray @wait me (or several) elsewhere. Use semaphores
with caution.  @wait 0={foo} will wait until previous commands have executed
and will generally suffice.

8. Destroying objects

TinyMUSH/MUX/Rhost has @destroy/instant

PennMUSH default configuration has @destroy disabled (in preference for the
@recycle alias). To destroy without waiting for a purge cycle, use @nuke twice.



9. Installation notes

PennMUSH's default @pemit configuration is noisy (emitting player gets feedback).
Use 'think' in installation files to prevent double messages.

PennMUSH's @attribute/access implementation does NOT save between resets.  The
installing wizard should use @attribute/access/retroactive and add the 
@attribute/access commands to a wizard @startup.

Rhost requires installing wizard set SIDEFX to use create(), and most objects
that use side effects must also be set this way.

PennMUSH can't handle the large number of [ symbols in the pie chart map.  These
have been moved out to be re-merged via foreach() when needed.