@@
@@ Anomaly Jobs 6.2 Installer
@@ Patch from version 6.1 to 6.2. For earlier versions use the full install.
@@ Quote this file from your client with a 1-second delay
@@
think [repeat(=,77)]%r%r[center(ansi(hc,Setting up Anomaly Jobs v6.2),77)]%r%r[repeat(=,77)]
@set me=quiet
think [ansi(hc,ANOMALY JOBS:)] Checking current installation.
@switch [ifelse(isdbref(setr(0,switch(first(version()),PennMUSH,lsearch(all,eobjects,\[strmatch(name(##),Job Global Object <JGO>)\]),RhostMUSH,searchng(object=Job Global Object <JGO>),search(object=Job Global Object <JGO>)))),setq(1,get(%q0/VA)),[setq(1,switch(first(version()),PennMUSH,lsearch(all,eobjects,\[strmatch(name(##),Job Database <JD>)\]),RhostMUSH,searchng(object=Job Database <JD>),search(object=Job Database <JD>)))][setq(0,loc(%q1))])][isdbref(%q0)][and(isdbref(%q1),gte(edit(first(default(%q1/version,0),.),v,),5))]=0*,{think [ansi(hc,ANOMALY JOBS:)] No previous jobs installation found.  Creating a new one.;&JOB_GO %#=setr(0,create(Job Global Object <JGO>,10));&JOB_VA %#=setr(1,create(Job Database <JD>,10));&JOB_VB %#=setr(2,create(Job Tracker,10));&JOB_VC %#=setr(3,create(Job Parent Object <JPO>,10));&JOB_PATCH %#=0;@tel %q1=%q0;@tel %q2=%q0;@tel %q3=%q0;},10*,{think [ansi(hc,ANOMALY JOBS:)] [ansi(hr,Not a valid Jobs 5 or later installation.)];think [ansi(hc,ANOMALY JOBS:)] [ansi(hr,Aborting. Cancel this script in your client.)];&JOB_GO %#=#-1;&JOB_VA %#=#-1;&JOB_VB %#=#-1;&JOB_VC %#=#-1;&JOB_PATCH %#=1;},{think [ansi(hc,ANOMALY JOBS:)] Current installation found.  Updating.;&JOB_GO %#=%q0;&JOB_VA %#=%q1;&JOB_VB %#=get(%q0/VB);&JOB_VC %#=get(%q0/VC);&JOB_PATCH %#=1;}
think [ansi(hc,ANOMALY JOBS:)] Setting up commands.
&CMD_BUCKET/ACCESS [v(JOB_GO)]=$+bucket/access *=*:@switch [u(%va/GIVE_ACCESS,%#)][setq(0,pmatch(trim(%0)))][setq(1,u(%va/FN_FIND-BUCKET,%1))][isdbref(%q0)][isdbref(%q1)][u(%va/HAS_ACCESS,%q0)][u(%va/FN_WIZONLY,%q0)][u(%va/FN_ACCESSCHECK,%q1,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no player by that name.},110*,{@pemit %#=There is no bucket by that name.},1110*,{@pemit %#=That player does not have +jobs access.},11111*,{@pemit %#=That player can always access all buckets.},111100*,{@pemit %#=You have given [name(%q0)] access to the [name(%q1)] bucket and all jobs in it.;&JOBSB %q0=[ifelse(member(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)),remove(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)),setunion(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)))];@dolist children(%q1)={&JOBACCESS itext(0)=[remove(get([itext(0)]/JOBACCESS),u(%va/FN_OBJID,%q0))]}},{@pemit %#=You have removed [name(%q0)]'s access to the [name(%q1)] bucket and all jobs in it.;&JOBSB %q0=[ifelse(member(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)),remove(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)),setunion(get(%q0/JOBSB),u(%va/FN_OBJID,%q1)))];@dolist children(%q1)={&JOBACCESS itext(0)=[remove(get([itext(0)]/JOBACCESS),u(%va/FN_OBJID,%q0))]}}
&CMD_BUCKET/CHECK [v(JOB_GO)]=$+bucket/check *:@switch [isdbref(setr(0,pmatch(trim(%0))))]=0,{@pemit %#=There is no such player.},{@pemit %#=[u(%va/FN_HEADER,Bucket Information For [name(%q0)])]%r%r[ansi(h,[ljust(Bucket,15)]%bHas Access?)]%r[iter(lcon(%VC),[ljust(name(itext(0)),15)]%b[ifelse(u(%VA/fn_accesscheck,itext(0),%q0),Yes,No)],%b,%r)];@pemit %#=%r[u(%va/FN_FOOTER)]}
&CMD_BUCKET/CREATE [v(JOB_GO)]=$+bucket/create *=*:@switch [setq(0,u(%va/FN_FIND-BUCKET,%0))][u(%va/FN_WIZONLY,%#)][not(isdbref(%q0))][not(gt(strlen(trim(%0)),5))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is already a bucket by that name.},110*,{@pemit %#=The name of a bucket is limited to five letters.},{@pemit %#=You have created a bucket named [ucstr(trim(%0))].[setq(0,create(ucstr(trim(%0)),10))] Be sure to change %q0/ACCESS to establish who can access the bucket. Presently, it is set to 1, which means that anyone who can access +jobs can access the bucket.;@tel %q0=%vc;@parent %q0=%vc;@desc %q0=[trim(secure(%1))];@set %q0=inherit !safe !halted !no_command;&ACCESS %q0=1;@lock/speech %q0=ACCESS/1}
&CMD_BUCKET/DELETE [v(JOB_GO)]=$+bucket/delete *:@switch [u(%va/FN_WIZONLY,%#)][setq(0,u(%va/FN_FIND-BUCKET,%0))][isdbref(%q0)][eq(words(remove(children(%q0),#-1)),0)][not(hasflag(%q0,SAFE))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no bucket by that name.},110*,{@pemit %#=The bucket is not empty, and cannot be deleted.},1110*,{@pemit %#=That bucket is required for the system to operate properly.},{@pemit %#=You have deleted the bucket named [ucstr(%0)].;@set %q0=DESTROY_OK;@nuke %q0;@dolist [switch(first(version()),PennMUSH,lsearch(all,type,player),RhostMUSH,searchng(type=player),search(type=player))]={&JOBSH ##=[remove(get(##/JOBSH),%q0)];&JOBSB ##=[remove(get(##/JOBSB),u(%va/FN_OBJID,%q0))]}}
&CMD_BUCKET/SET [v(JOB_GO)]=$+bucket/set */*=*:@switch [setq(0,u(%va/FN_FIND-BUCKET,%0))][and(u(%va/HAS_ACCESS,%#),u(%va/CONFIG_ACCESS,%#),u(%q0/ACCESS_[trim(%1)],%#))][isdbref(%q0)][u(%va/FN_HASATTRP,%q0,ACCESS_%1)][u(%q0/PROCESS_[trim(%1)],trim(%2),%q0,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no bucket by that name. See '[ansi(h,+buckets)]' for a list of valid buckets.},110*,{@pemit %#='%1' is not a valid parameter. Valid parameters for [name(%q0)] are [u(%va/FN_ITEMIZE,map(%va/MAP_PARAMS,lattr(%vc/PROCESS_*)))].},1110*,{@pemit %#=[u(%q0/ERROR_[trim(%1)]%q2)]},{@pemit %#=[name(%q0)]'s [ucstr(trim(%1))] successfully updated to: '[trim(%2)]'.;&%q3 %q0=%q1}
&CMD_BUG [v(JOB_GO)]=$+bug *=*:@switch [not(haspower(%#,guest))]=0*,{@pemit %#=Permission Denied.},{@pemit %#=You have notified production staff of the [secure(u(%va/FN_STRTRUNC,trim(%0),30))] bug, with the details '[secure(u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER)))]';@trigger %va/TRIG_CREATE=%#,u(%va/FN_FIND-BUCKET,CODE),3,BUG: [u(%va/FN_STRTRUNC,trim(%0),30)],[u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER))],,,5}
&CMD_JGROUP/CREATE [v(JOB_GO)]=$+jgroup/create *=*:@switch [u(%va/FN_WIZONLY,%#)][setq(0,u(%va/FN_FIND-JGROUP,%0))][not(isdbref(%q0))][strmatch(%0,+*)][eq(words(%0),1)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is already a jgroup by that name.},110*,{@pemit %#=Jgroup names must begin with +.},1110*,{@pemit %#=Jgroup names may not contain spaces.},{@pemit %#=You have created a jgroup named [trim(%0)].[setq(0,create(trim(%0),10))] The %q0/ISMEMBER is set to use the %q0/MEMBERLIST attribute and +jgroup/member command. Override %q0/ISMEMBER if you wish to change this.;@tel %q0=%vb;@desc %q0=[secure(trim(%1))];&ISMEMBER %q0=lit(t(member(v(MEMBERLIST),%0)));@set %q0=inherit !safe !halted !no_command;}
&CMD_JOB/ACCESS [v(JOB_GO)]=$+job/access *=*:@switch [u(%va/GIVE_ACCESS,%#)][setq(0,pmatch(trim(%0)))][setq(1,u(%va/FN_FIND-JOB,%1))][isdbref(%q0)][isdbref(%q1)][u(%va/HAS_ACCESS,%q0)][u(%va/FN_WIZONLY,%q0)][u(%va/FN_ACCESSCHECK,parent(%q1),%q0,%q1)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no player by that name.},110*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},1110*,{@pemit %#=That player does not have +jobs access.},11111*,{@pemit %#=That player can always access all jobs.},111100*,{@pemit %#=You have given [name(%q0)] access to [name(%q1)].;&JOBACCESS %q1=[ifelse(member(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)),remove(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)),setunion(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)))]},{@pemit %#=You have removed [name(%q0)]'s access to [name(%q1)].;&JOBACCESS %q1=[ifelse(member(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)),remove(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)),setunion(get(%q1/JOBACCESS),u(%va/FN_OBJID,%q0)))]}
&CMD_JOB/ACT [v(JOB_GO)]=$+job/act *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][or(u(%va/FN_STAFFALL,%#),u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '+jobs/all' for all jobs or '+jobs/<type>' to list by type.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_HEADER,View Job Number %0)]%r[ulocal(%va/FN_BANNER,%q0)]%r[u(%va/FN_BREAK)];@dolist sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*))={@pemit %#=[rest(convsecs(extract(get(%q0/##),2,1,|)))]%b[first(get(%q0/##),|)]%b[ljust(u(%va/FN_STRTRUNC,extract(get(%q0/##),4,1,|),15),15)]%b[ljust(u(%va/FN_STRTRUNC,u(%va/fn_trim,edit(edit(edit(last(get(%q0/##),|),@@PIPE@@,|),%r,%b),%t,%b),b),35),35)]};@wait 0={@pemit %#=[u(%va/FN_FOOTER)]};}
&CMD_JOB/ADD [v(JOB_GO)]=$+job/add *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/ADD_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is an invalid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=Comments to [name(%q0)] added.;&TAGGED_FOR %q0=[remove(get(%q0/TAGGED_FOR),%#)];@trigger %va/TRIG_ADD=%q0,trim(%1),%#,ADD;@trigger %va/TRIG_BROADCAST=%q0,%#,ADD}
&CMD_JOB/ALL [v(JOB_GO)]=$+job/all *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_READERS,%q0,%#,1)][u(%va/FN_HEADER,View [name(%q0)])]%r[ulocal(%va/FN_BANNER,%q0,%#)][ifelse(u(%va/FN_HASATTRP,%q0,SUMMARY),[ulocal(%va/FN_SUMMARY,%q0,%#)],)];@dolist [sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};&TAGGED_FOR %q0=[remove(get(%q0/TAGGED_FOR),%#)];@wait 0={@pemit %#=[u(%va/FN_FOOTER,u(%va/FN_FLAGS,%q0))]};}
&CMD_JOB/APPROVE [v(JOB_GO)]=$+job/approve *=*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/APPROVE_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/APR_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no job by that number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_ADDSTAT_ART,parent(%q0),%q0)][u(%va/FN_ADDSTAT_ART,%vc,%q0)]You have approved [name(%q0)], adding the comments: [trim(%1)];@trigger %va/TRIG_BROADCAST=%q0,%#,APR;@trigger %va/TRIG_ADD=%q0,[u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER))],%#,APR;@trigger %va/TRIG_DESTROY=%q0}
&CMD_JOB/ASSIGN [v(JOB_GO)]=$+job/assign *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(1,switch(trim(%1),+*,u(%va/FN_FIND-JGROUP,%1),pmatch(trim(%1))))][setq(2,switch(trim(%1),NONE,1,0))][or(isdbref(%q1),%q2)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/ASN_ACCESS,1,%#)][switch(1,%q2,1,strmatch(%1,+*),[setq(3,u(%va/FN_JGROUPMEMBERS,%q1))][setq(4,iter(%q3,u(%va/FN_ACCESSCHECK,parent(%q0),itext(0),%q0)))][setq(5,member(%q4,0))][not(gt(%q5,0))],u(%va/FN_ACCESSCHECK,parent(%q0),%q1,%q0))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no player or jgroup by that name.},110*,{@pemit %#=That is not a valid job number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available on that job.},1111110*,{@pemit %#=[ifelse(strmatch(%1,+*),[name(%q1)] member [name(extract(%q3,%q5,1))],name(%q1))] does not have access to that bucket.},{@pemit %#=You have [ifelse(strmatch(%q1,%#),claimed,assigned)] [name(%q0)][ifelse(strmatch(%q1,%#),.,%bto [ifelse(isdbref(%q1),name(%q1),nobody)])];&ASSIGNED_TO %q0=[ifelse(%q2,,%q1)];@trigger %va/TRIG_ADD=%q0,[ifelse(%q2,Assignment removed.,Assigned to [name(%q1)])].,%#,ASN,%q1;@trigger %va/TRIG_BROADCAST=%q0,%#,ASN,[ifelse(%q2,,%q1)]}
&CMD_JOB/CHECKOUT [v(JOB_GO)]=$+job/checkout *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][not(u(%va/FN_HASATTR,%q0,CHECKOUT))][udefault(%q0/CKO_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)].},11110*,{@pemit %#=That job is already checked out.},111110*,{@pemit %#=That action is not available on that job.},1111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_READERS,%q0,%#)]You have checked out [name(%q0)]. Nobody but you will be able to modify it until you check it back in.;&CHECKOUT %q0=%# [secs()];@trigger %va/TRIG_ADD=%q0,Checked out by [name(%#)].,%#,CKO;@trigger %va/TRIG_BROADCAST=%q0,%#,CKO}
&CMD_JOB/CHECKIN [v(JOB_GO)]=$+job/checkin *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_HASATTR,%q0,CHECKOUT)][or(u(%va/FN_WIZONLY,%#),switch(first(get(%q0/CHECKOUT)),%#,1,0))][udefault(%q0/CKI_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is not checked out.},11110*,{@pemit %#=You cannot check that job back in.},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_READERS,%q0,%#)]You have checked [name(%q0)] back in.;&CHECKOUT %q0=;@trigger %va/TRIG_ADD=%q0,Checked in by [name(%#)].,%#,CKI;@trigger %va/TRIG_BROADCAST=%q0,%#,CKI}
&CMD_JOB/CLONE [v(JOB_GO)]=$+job/clone *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][udefault(%q0/CLN_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that number.},110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That action is not available for that job.},{@pemit [setq(1,inc(get(%va/JOBS_NUM)))]%#=Job copied as Job %q1.;&JOBS_NUM %va=%q1;@clone %q0=Job %q1;@tel [setr(2,num(Job %q1))]=%va;@trigger %va/TRIG_ADD=%q2,Cloned job.,%#,CLN,%q0;@trigger %va/TRIG_BROADCAST=%q0,%#,CLN,%q1}
&CMD_JOB/COMPLETE [v(JOB_GO)]=$+job/complete *=*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/COMPLETE_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/COM_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=That is not a valid job #. See '+jobs/all' for valid jobs.},1110*,{@pemit %#=Permission denied.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_ADDSTAT_ART,parent(%q0),%q0)][u(%va/FN_ADDSTAT_ART,%vc,%q0)]You have completed [name(%q0)].;@trigger %va/TRIG_ADD=%q0,[u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER))],%#,COM;@trigger %va/TRIG_BROADCAST=%q0,%#,COM,%q1;@trigger %va/TRIG_DESTROY=%q0}
&CMD_JOB/CREATE [v(JOB_GO)]=$+job/create */*=*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/CREATE_ACCESS,%#)][setq(0,u(%va/FN_FIND-BUCKET,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,%q0,%#,%q0)][udefault(%q0/CRE_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no bucket by that name. Type '[ansi(h,+buckets)]' to get a list of buckets.},1110*,{@pemit %#=You cannot access that bucket.},11110*,{@pemit %#=That action is not available for that bucket.},{@pemit [setq(1,inc(get(%va/JOBS_NUM)))]%#=You have created job number %q1 entitled '[u(%va/FN_STRTRUNC,trim(%1),30)]'.;@trigger %va/TRIG_CREATE=%#,%q0,1,[u(%va/FN_STRTRUNC,trim(%1),30)],[u(%va/FN_STRTRUNC,trim(%2),u(%va/BUFFER))],,,1}
&CMD_JOB/DELETE [v(JOB_GO)]=$+job/delete *:@switch [u(%va/HAS_ACCESS,%#)][or(u(%va/DELETE_ACCESS,%#),u(%va/FN_WIZONLY,%#),switch(%#,%va,1,0))][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/DEL_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=That is not a valid job number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_ADDSTAT_ART,parent(%q0),%q0)][u(%va/FN_ADDSTAT_ART,%vc,%q0)]You have deleted [name(%q0)].;@trigger %va/TRIG_ADD=%q0,Job %0 Deleted,%#,DEL;@trigger %va/TRIG_DESTROY=%q0}
&CMD_JOB/DENY [v(JOB_GO)]=$+job/deny *=*:@switch [u(%va/HAS_ACCESS,%#)][or(u(%va/DENY_ACCESS,%#),u(%va/FN_STAFFALL,%#))][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/DNY_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no job by that number.},1110*,{@pemit %#=You cannot access that job.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=[u(%va/FN_ADDSTAT_ART,parent(%q0),%q0)][u(%va/FN_ADDSTAT_ART,%vc,%q0)]You have denied [name(%q0)].;@trigger %va/TRIG_BROADCAST=%q0,%#,DNY;@trigger %va/TRIG_ADD=%q0,[u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER))],%#,DNY;@trigger %va/TRIG_DESTROY=%q0}
&CMD_JOB/DUE [v(JOB_GO)]=$+job/due *=*:@switch [not(eq(words(trim(%1),/),3))][u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][udefault(%q0/DUE_ACCESS,1,%#)][switch(lcstr(trim(%1)),none,2,ifelse(gt(setr(1,u(%va/FN_STRINGSECS,trim(%1))),0),1[setq(1,add(%q1,secs()))],ifelse(gt(setr(1,convtime(trim(%1))),0),1,ifelse(gt(setr(1,convtime(trim(XXX %1))),0),1,t(gt(setr(1,convtime(trim(%1 23:59:59))),0))))))]=0*,{@@},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=That is not a valid job number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That action is not available for that job.},111110*,{@pemit %#=Invalid date. Use date formatting as '[rest(time())]'.},111112*,{@pemit %#=You have cleared [name(%q0)]'s date.;&DUE_ON %q0=;@trigger %va/TRIG_ADD=%q0,Due date cleared.,%#,DUE;@trigger %va/TRIG_BROADCAST=%q0,%#,DUE},{@pemit %#=You have set [name(%q0)]'s date to [convsecs(%q1)].;&DUE_ON %q0=%q1;@trigger %va/TRIG_ADD=%q0,Due on [secure(%1)].,%#,DUE,[secure(%1)];@trigger %va/TRIG_BROADCAST=%q0,%#,DUE}
&CMD_JOB/DUE2 [v(JOB_GO)]=$+job/due *=*/*/*:@switch [u(%va/HAS_ACCESS,%#)][isdbref(setr(0,u(%va/FN_FIND-JOB,%0)))][setq(1,convtime(XXX [switch([rjust(trim(%1),2,0)],01,Jan,02,Feb,03,Mar,04,Apr,05,May,06,Jun,07,Jul,08,Aug,09,Sep,10,Oct,11,Nov,12,Dec)] [rjust(trim(%2),2,0)] 23:59:00 [switch(strlen(trim(%3)),2,20[rjust(trim(%3),2,0)],trim(%3))]))][gt(%q1,0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][udefault(%q0/DUE_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job number.},110*,{@pemit %#=Invalid date. Use date formatting as 'MM/DD/YY', '[rest(time())]', 'none' to clear.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have set [name(%q0)]'s date to [convsecs(%q1)].;&DUE_ON %q0=%q1;@trigger %va/TRIG_ADD=%q0,Due on [convsecs(%q1)].,%#,DUE;@trigger %va/TRIG_BROADCAST=%q0,%#,DUE}
&CMD_JOB/EDIT [v(JOB_GO)]=$+job/edit */*=*/*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/EDIT_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][setq(1,get(%q0/COMMENT_[trim(%1)]))][switch(first(%q1,|),ADD,1,CRE,1,0)][not(u(%va/IS_LOCKED,%q0,%#))][switch(extract(%q1,3,1,|),%#,1,u(%va/FN_WIZONLY,%#))][udefault(%q0/EDT_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=That is an invalid job number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=You cannot modify that entry.},111110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},1111110*,{@pemit %#=You can only edit entries that belong to you.},11111110*,{@pemit %#=That action is not available for that job.},{&COMMENT_[trim(%1)] %q0=[extract(%q1,1,4,|)]|[edit(last(%q1,|),edit(%2,|,@@PIPE@@),edit(%3,|,@@PIPE@@))];@pemit %#=Edited: [last(u(%q0/COMMENT_[trim(%1)]),|)];@trigger %va/TRIG_ADD=%q0,Comment %1 edited by %n.,%#,EDT,[objeval(%#,secure(%1))];@trigger %va/TRIG_BROADCAST=%q0,%#,EDT}
&CMD_JOB/ESC [v(JOB_GO)]=$+job/esc *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][setq(1,match(green yellow red,[trim(%1)]*))][setq(2,extract(GREEN YELLOW RED,%q1,1))][gt(%q1,0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/ESC_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That is not a valid escalation code. Valid codes are red, yellow, and green.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have escalated job # %0 to %q2 status.;&PRIORITY %q0=%q1;@trigger %va/TRIG_ADD=%q0,Priority To %q2.,%#,ESC,ucstr(trim(%1));@trigger %va/TRIG_BROADCAST=%q0,%#,ESC,%q2}
&CMD_JOB/HELP [v(JOB_GO)]=$+job/help *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,parent(u(%va/FN_FIND-JOB,%0)))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,%q0,%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job. Type '[ansi(h,+jobs)]' for a list of valid jobs.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_HEADER,Job Help For Bucket [name(%q0)])];@pemit %#=[u(%q0/HELP)][ifelse(u(%va/FN_HASATTRP,%q0,MYHELP),%r[u(%va/FN_BREAK,[ansi(c,Myjob Help)])]%r[u(%q0/MYHELP)],)];@pemit %#=[u(%va/FN_FOOTER)]}
&CMD_JOB/LAST [v(JOB_GO)]=$+job/last *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '+jobs/all' for all jobs or '+jobs/<type>' to list by type.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_READERS,%q0,%#,1)][u(%va/FN_HEADER,View [name(%q0)])]%r[ulocal(%va/FN_BANNER,%q0)];@dolist [extract(setr(1,filter(%va/FIL_COMMENTS,sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*)))),ifelse(lt(sub(words(%q1),trim(%1)),1),1,inc(sub(words(%q1),trim(%1)))),inc(trim(%1)))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};@wait 0={@pemit %#=[u(%va/FN_FOOTER,u(%va/FN_FLAGS,%q0))]};}
&CMD_JOB/LOCK [v(JOB_GO)]=$+job/lock *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/FN_HASATTR,%q0,LOCKED))][udefault(%q0/LOK_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is an invalid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is already locked.},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have locked [name(%q0)]. No further modifications can be made to this job until it is unlocked.;&LOCKED_BY %q0=%#;&LOCKED %q0=1;@trigger %va/TRIG_ADD=%q0,Locked by %n.,%#,LOK;@trigger %va/TRIG_BROADCAST=%q0,%#,LOK}
&CMD_JOB/LOG [v(JOB_GO)]=$+job/log *:@switch [u(%va/HAS_ACCESS,%#)][u(%va/LOG_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_HASATTRP,%q0,LOGFILE)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no job by that name. Please type '+jobs/all' for all jobs or '+jobs/<type>' to list by type.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=There is no logfile for that bucket.},{@pemit %#=Logging [name(%q0)] to game/[switch(first(version()),PennMUSH,log/command.log,TinyMUSH,netmush.log,RhostMUSH,[get(%q0/LOGFILE)]_manual.log,logs/M-[get(%q0/LOGFILE)].log%rNote that if the log file does not exist, then it did not get logged.)];@trigger %va/TRIG_LOG=%q0,%#}
&CMD_JOB/MAIL [v(JOB_GO)]=$+job/mail *=*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/MAIL_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/IS_PUBLIC,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/MAI_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no job by that number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=+job/mail cannot be used on the job because the bucket in which it is stored is not set PUBLIC %(+myjobs-accessible%).},111110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},1111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have mailed [u(%va/FN_PLAYERLIST,%q0)] about [name(%q0)], with the comments: [trim(%1)];@trigger %va/TRIG_ADD=%q0,[u(%va/FN_STRTRUNC,ansi(h,Mail sent to [u(%va/FN_PLAYERLIST,%q0)]:)%r%r[trim(%1)],get(%va/BUFFER))],%#,MAI;@trigger %va/TRIG_BROADCAST=%q0,%#,MAI,%q1}
&CMD_JOB/MERGE [v(JOB_GO)]=$+job/merge *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%1))][setq(1,u(%va/FN_FIND-JOB,%0))][isdbref(%q1)][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_ACCESSCHECK,parent(%q1),%#,%q0)][setq(2,u(%q0/NUM_COMMENT))][setq(3,u(%q1/NUM_COMMENT))][and(not(u(%va/IS_LOCKED,%q0,%#)),not(u(%va/IS_LOCKED,%q1,%#)))][not(eq(%0,%1))][udefault(%q0/MRG_ACCESS,1,%#)][udefault(%q1/MRG_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job number %0.},110*,{@pemit %#=There is no job number %1.},1110*,{@pemit %#=You do not have access to [name(%q0)].},11110*,{@pemit %#=You do not have access to [name(%q1)].},111110*,{@pemit %#=One of those jobs is locked or checked out.},1111110*,{@pemit %#=Sort of like a Klein bottle, eh?},11111110*,{@pemit %#=That action is not available for [name(%q0)].},111111110*,{@pemit %#=That action is not available for [name(%q1)].},{@trigger %va/TRIG_ADD=%q0,[name(%q1)] merged into this one.,%#,MRG;@trigger %va/TRIG_BROADCAST=%q0,%#,MRG,%q1;@wait 0={@dolist [sortby(%va/SORTBY_COMMENTS,lattr(%q1/COMMENT_*))]={@cpattr %q1/##=%q0/COMMENT_[get(%q0/NUM_COMMENT)];&NUM_COMMENT %q0=[inc(get(%q0/NUM_COMMENT))]};@trigger %va/TRIG_DESTROY=%q1}};
&CMD_JOB/NAME [v(JOB_GO)]=$+job/name *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/NAM_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have changed the name of [name(%q0)] to [trim(%1)].;&TITLE %q0=[secure(trim(%1))];@trigger %va/TRIG_ADD=%q0,Renamed to '[secure(trim(%1))]'.,%#,NAM;@trigger %va/TRIG_BROADCAST=%q0,%#,NAM,[secure(trim(%1))]}
&CMD_JOB/NEW [v(JOB_GO)]=$+job/new *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][setq(1,default(%#/LAST_CONN,0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '+jobs/all' for all jobs or '+jobs/<type>' to list jobs by type.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_HEADER,View [name(%q0)])]%r[ulocal(%va/FN_BANNER,%q0)][ifelse(u(%va/FN_HASATTRP,%q0,SUMMARY),[ulocal(%va/FN_SUMMARY,%q0)],)];@dolist [filter(%va/FIL_NEWCOMMENTS[default(%#/JOBSN,0)],sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*)))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};@wait 0={@pemit %#=[ifelse(u(%va/IS_LOCKED,%q0,%#),u(%va/FN_FOOTER,u(%va/FN_FLAGS,%q0)),[u(%va/FN_FOOTER,New Activity on [name(%q0)] since [convsecs(%q1)])])][u(%va/FN_READERS,%q0,%#,1)]};}
&CMD_JOB/PUBLISH [v(JOB_GO)]=$+job/publish *:@switch [eq(words(%0,=),1)][u(%va/HAS_ACCESS,%#)][u(%va/EDIT_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_HASATTRP,%q0,PUBLIC)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/PUB_ACCESS,1,%#)][eq(u(%q0/PUBLISH),1)]=0*,@@,10*,{@pemit %#=Permission denied.},110*,{@pemit %#=Permission denied.},1110*,{@pemit %#=There is no job by that number.},11110*,{@pemit %#=You do not have access to that job.},111110*,{@pemit %#=That job is not in a bucket that is accessible to +myjobs, so publication is moot.},1111110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11111110*,{@pemit %#=That action is not available for that job.},111111110*,{@pemit %#=You have published [name(%q0)].;&PUBLISH %q0=1;@trigger %va/TRIG_ADD=%q0,Published by %n.,%#,PUB;@trigger %va/TRIG_BROADCAST=%q0,%#,PUB},{@pemit %#=[name(%q0)] will now no longer be published.;&PUBLISH %q0=0;@trigger %va/TRIG_ADD=%q0,Unpublished by %n.,%#,UNP;@trigger %va/TRIG_BROADCAST=%q0,%#,UNP}
&CMD_JOB/PUBLISH2 [v(JOB_GO)]=$+job/publish *=*:@switch [u(%va/HAS_ACCESS,%#)][u(%va/EDIT_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][u(%va/IS_PUBLIC,%q0)][u(%va/FN_HASATTRP,%q0,COMMENT_[trim(%1)])][udefault(%q0/PUB_ACCESS,1,%#)][neq(u(%q0/PUBLISH),1)][hasflag(%q0/COMMENT_%1,no_inherit)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=Permission denied.},110*,{@pemit %#=There is no job by that number.},1110*,{@pemit %#=You do not have access to that job.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That job is not in a bucket that is accessible to +myjobs, so publication is moot.},1111110*,{@pemit %#=That is not a valid comment number.},11111110*,{@pemit %#=That action is not available for that job.},111111110*,{@pemit %#=That job is published. Comment publication has no effect.},1111111110*,{@pemit %#=You have published Comment [trim(%1)] on [name(%q0)].;@set %q0/COMMENT_[trim(%1)]=no_inherit;@trigger %va/TRIG_ADD=%q0,Comment [trim(%1)] published by %n.,%#,PUB;@trigger %va/TRIG_BROADCAST=%q0,%#,PUB,%1},{@pemit %#=[name(%q0)]/Comment [trim(%1)] will no longer be published.;@set %q0/COMMENT_[trim(%1)]=!no_inherit;@trigger %va/TRIG_ADD=%q0,Comment [trim(%1)] Unpublished by %n.,%#,UNP;@trigger %va/TRIG_BROADCAST=%q0,%#,UNP,trim(%1)}
&CMD_JOB/QUERY [v(JOB_GO)]=$+job/query */*=*:@switch [and(u(%va/HAS_ACCESS,%#),u(%va/MAIL_ACCESS,%#))]=0*,{@pemit %#=Permission denied.},{@switch [setq(1,map(%va/MAP_SOURCE,secure(trim(%0))))][setq(2,member(%q1,#-1))][not(gt(%q2,0))]=0,{@pemit %#='[extract(secure(trim(%0)),%q2,1)]' is not a valid player or jgroup.},{@pemit %#=You have sent a query to '[trim(%0)]' regarding '[trim(%1)]'.;@trigger %va/TRIG_CREATE=%#,u(%va/FN_FIND-BUCKET,QUERY),2,[u(%va/FN_STRTRUNC,secure(trim(%1)),30)],Queried [u(%va/FN_ITEMIZE,map(%va/MAP_NAME,%q1,%b,|),|)]:%r%r[u(%va/FN_STRTRUNC,trim(%2),get(%va/BUFFER))],%q1,,0}}
&CMD_JOB/SET [v(JOB_GO)]=$+job/set *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][setq(2,dec(member(setr(a,HOLD NEW UNDERWAY 25 50 75 100),ucstr(trim(%1)))))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][and(isnum(%q2),gt(%q2,-1),lt(%q2,7))][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/STA_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That is an invalid setting. Valid job settings are:%r[u(%va/FN_ITEMIZE,lcstr(%qa))].},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You set [name(%q0)] to [setr(1,switch(%q2,0,ON HOLD,1,NEW,2,UNDERWAY,3,1/4 COMPLETE,4,1/2 COMPLETE,5,3/4 COMPLETE,COMPLETE))] status.;&STATUS %q0=%q2;@trigger %va/TRIG_ADD=%q0,Set to %q1.,%#,STA;@trigger %va/TRIG_BROADCAST=%q0,%#,STA,%q1}
&CMD_JOB/SOURCE [v(JOB_GO)]=$+job/source *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][setq(1,map(%va/MAP_SOURCE,secure(trim(%1))))][setq(2,member(%q1,#-1))][not(gt(%q2,0))][udefault(%q0/SRC_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11110*,{@pemit %#='[extract(secure(trim(%1)),%q2,1)]' is not a valid player or jgroup.},111110*,{@pemit %#=That action is not available for that job.},{&opened_by %q0=%q1;@pemit %#=You have set job #%0 to have a source of [u(%va/FN_PLAYERLIST,%q0)].;@trigger %va/TRIG_ADD=%q0,Source changed to [u(%va/FN_PLAYERLIST,%q0)].,%#,SRC;@trigger %va/TRIG_BROADCAST=%q0,%#,SRC,%q1}
&CMD_JOB/SUMMARY [v(JOB_GO)]=$+job/summary *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_HEADER,View [name(%q0)])]%r[ulocal(%va/FN_BANNER,%q0)][ifelse(u(%va/FN_HASATTRP,%q0,SUMMARY),[ulocal(%va/FN_SUMMARY,%q0)],)][ifelse(u(%va/FN_WIZONLY,%#),[ulocal(%va/FN_STAFFSUM,%q0)],)];@wait 0={@pemit %#=[u(%va/FN_FOOTER,u(%va/FN_FLAGS,%q0))]};}
&CMD_JOB/SUMSET [v(JOB_GO)]=$+job/sumset */*=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_HASATTRP,%q0,ACCESS_[trim(%1)])][and(u(%va/CONFIG_ACCESS,%#),u(%q0/ACCESS_[trim(%1)],%#))][not(u(%va/IS_LOCKED,%q0,%#))][u(%q0/PROCESS_[trim(%1)],trim(%2),%q0,%#)][udefault(%q0/SUM_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no such job. See '[ansi(h,+jobs)]' for a list of valid jobs.},110*,{@pemit %#='[trim(%1)]' is not a valid parameter. Valid parameters for [name(%q0)] are [u(%va/FN_ITEMIZE,map(%va/MAP_PARAMS,lattr(parent(%q0)/PROCESS_*)))].},1110*,{@pemit %#=You either can not use the +job/sumset command, or set that parameter.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=[u(%q0/ERROR_[trim(%1)]%q2)]},1111110*,{@pemit %#=That action is not available for that job.},{@trigger %va/TRIG_BROADCAST=%q0,%#,SUM,[ucstr(trim(%1))];&%q3 %q0=%q1;@trigger %va/TRIG_ADD=%q0,[ucstr(trim(%1))] parameter updated to '[trim(%2)]',%#,SUM}
&CMD_JOB/TAG [v(JOB_GO)]=$+job/tag *:@switch [u(%va/HAS_ACCESS,%#)][switch(strmatch(%0,*=*),1,[setq(8,first(%0,=))][setq(9,trim(secure(rest(%0,=))))],[setq(8,%0)][setq(9,%#)])][setq(7,map(%va/MAP_JGROUP,%q9))][setq(6,u(%va/fn_trim,squish(map(%va/MAP_JGROUPERROR,%q9))))][setq(0,u(%va/FN_FIND-JOB,%q8))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/TAG_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is an invalid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11110*,{@pemit %#=That action is not available for that job.},{@switch [t(strlen(%q6))]=1,{@pemit %#=%q6},{@switch [strlen(setdiff(%q7,get(%q0/tagged_for)))]=0,{@pemit %#={[name(%q0)] is already tagged for the named player(s): [u(%va/FN_ITEMIZE,map(%va/MAP_NAME,%q7,%b,|),|)]}},{&tagged_for %q0=[setunion(get(%q0/tagged_for),%q7)];@trigger %va/TRIG_ADD=%q0,Added tags for [setr(5,u(%va/FN_ITEMIZE,map(%va/MAP_NAME,%q7,%b,|),|))],%#,TAG,%q7;@trigger %va/TRIG_BROADCAST=%q0,%#,TAG,%q5;@pemit %#={[name(%q0)] updated - tags added. Now tagged for: [u(%va/FN_ITEMIZE,map(%va/MAP_NAME,get(%q0/tagged_for),%b,|),|)]}}}}
&CMD_JOB/TRANS [v(JOB_GO)]=$+job/trans *=*:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][isdbref(setr(1,u(%va/FN_FIND-BUCKET,%1)))][udefault(%q0/TRN_ACCESS,1,%#)][udefault(%q1/TRN_ACCESS,1,%#)][not(u(%va/IS_LOCKED,%q0,%#))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=There is no bucket by that name. Type '[ansi(h,+buckets)]' for a list of valid buckets.},11110*,{@pemit %#=You cannot move that job from there.},111110*,{@pemit %#=You cannot move that job to there.},1111110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},{@pemit %#=You have transferred the job from [u(%va/FN_BUCKETNAME,%q0)] to [name(%q1)].;@set %q0=!going;&going %q0;@parent %q0=%q1;@trigger %va/TRIG_ADD=%q0,Transferred to [name(%q1)].,%#,TRN;@trigger %va/TRIG_BROADCAST=%q0,%#,TRN,%q1}
&CMD_JOB/UNDELETE [v(JOB_GO)]=$+job/undelete *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_HASATTR,%q0,GOING)][udefault(%q0/UND_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job has not been deleted.},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have restored [name(%q0)].;@set %q0=!going;&going %q0;@trigger %va/TRIG_ADD=%q0,Undeleted job.,%#,UND;@trigger %va/TRIG_BROADCAST=%q0,%#,UND,%q1}
&CMD_JOB/UNLOCK [v(JOB_GO)]=$+job/unlock *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][u(%va/FN_HASATTRP,%q0,LOCKED)][udefault(%q0/UNL_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is an invalid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is not locked.},11110*,{@pemit %#=That action is not available for that job.},{@pemit %#=You have unlocked [name(%q0)].;&LOCKED %q0=;&LOCKED_BY %q0=;@trigger %va/TRIG_ADD=%q0,Unlocked by %n.,%#,UNL;@trigger %va/TRIG_BROADCAST=%q0,%#,UNL}
&CMD_JOB/UNTAG [v(JOB_GO)]=$+job/untag *:@switch [u(%va/HAS_ACCESS,%#)][switch(strmatch(%0,*=*),1,[setq(8,first(%0,=))][setq(9,trim(secure(rest(%0,=))))],[setq(8,%0)][setq(9,%#)])][setq(7,map(%va/MAP_JGROUP,%q9))][setq(6,u(%va/fn_trim,squish(map(%va/MAP_JGROUPERROR,%q9))))][setq(0,u(%va/FN_FIND-JOB,%q8))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)][not(u(%va/IS_LOCKED,%q0,%#))][udefault(%q0/TAG_ACCESS,1,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is an invalid job number.},110*,{@pemit %#=You do not have access to that job.},1110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to [name(first(get(%q0/CHECKOUT)))],locked)]},11110*,{@pemit %#=That action is not available for that job.},{@switch [t(strlen(%q6))]=1,{@pemit %#=%q6},{@switch [strlen(setinter(%q7,get(%q0/tagged_for)))]=0,{@pemit %#={[name(%q0)] is not tagged for any of the named player(s): [u(%va/FN_ITEMIZE,map(%va/MAP_NAME,%q7,%b,|),|)]}},{&tagged_for %q0=[setdiff(get(%q0/tagged_for),%q7)];@trigger %va/TRIG_ADD=%q0,Removed tags for [setr(5,u(%va/FN_ITEMIZE,map(%va/MAP_NAME,%q7,%b,|),|))],%#,TAG;@trigger %va/TRIG_BROADCAST=%q0,%#,TAG,%q5;@pemit %#={[name(%q0)] updated - tags removed. Now tagged for: [u(%va/FN_ITEMIZE,map(%va/MAP_NAME,get(%q0/tagged_for),%b,|),|)]}}}}
&CMD_JOB/VIEW [v(JOB_GO)]=$+job *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][u(%va/FN_ACCESSCHECK,parent(%q0),%#,%q0)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no job by that name. Please type '[ansi(h,+jobs/all)]' for all jobs or '[ansi(h,+jobs/list <bucket>)]' to list by bucket.},110*,{@pemit %#=You do not have access to that job.},{@pemit %#=[u(%va/FN_READERS,%q0,%#,1)][u(%va/FN_HEADER,View [name(%q0)])]%r[ulocal(%va/FN_BANNER,%q0,%#)][ifelse(u(%va/FN_HASATTRP,%q0,SUMMARY),[ulocal(%va/FN_SUMMARY,%q0,%#)],)];@dolist [filter(%va/FIL_COMMENTS,sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*)))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};&TAGGED_FOR %q0=[remove(get(%q0/TAGGED_FOR),%#)];@wait 0={@pemit %#=[u(%va/FN_FOOTER,u(%va/FN_FLAGS,%q0))]};}
&CMD_JOBS/CATCHUP2 [v(JOB_GO)]=$+jobs/catchup *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,lcstr(%0))][setq(0,u(%va/FN_INFIX2POSTFIX,map(%va/MAP_JOBSELECT,u(%va/FN_TOKENLIST,%q0))))][not(strmatch(%q0,*#-1 MISMATCHED PARENS*))][not(strmatch(%q0,*#-1 SYNTAX ERROR*))][default(%#/JOBSN,0)]=0*,@pemit %#=Permission denied.,10*,@pemit %#=Mismatched parentheses.,110*,@pemit %#=Syntax error.,1110*,@pemit %#=You must set &JOBSN me=1 to make use of this command.,{@pemit %#=You are now caught up on jobs matching %q0.;@dolist [setq(1,filter(%va/FIL_GOING,lcon(%va)))][u(%va/FN_S-INIT)][map(%va/MAP_PARSESTACK,%q0)][u(%va/FN_S-PEEK)]={think [u(%va/FN_READERS,##,%#)]}}
&CMD_JOBS/SEARCH [v(JOB_GO)]=$+jobs/search *:@switch [u(%va/HAS_ACCESS,%#)]=0*,{@pemit %#=Permission denied.},{@pemit %#=[u(%va/FN_JOBSHEADER,%#)];@dolist revwords(lcon(%va))={@pemit [setq(0,%b)]%#=ifelse(and(u(%va/FN_ACCESSCHECK,parent(##),%#,##),gt(words(grepi(##,*,%0)),0)),[u(%va/FN_JOBLIST,##,%#)],)};@wait 0=@pemit %#=[u(%va/FN_FOOTER,* Denotes New Activity)];}
&CMD_JOBS/SELECT [v(JOB_GO)]=$+jobs/select *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,before(lcstr(%0),sort=))][setq(0,u(%va/FN_INFIX2POSTFIX,map(%va/MAP_JOBSELECT,u(%va/FN_TOKENLIST,%q0))))][not(strmatch(%q0,*#-1 MISMATCHED PARENS*))][not(strmatch(%q0,*#-1 SYNTAX ERROR*))][setq(9,u(%va/FN_TRIM,after(lcstr(%0),sort=)))][ifelse(setr(8,strmatch(%q9,-*)),setq(9,mid(%q9,1,dec(strlen(%q9)))),)][setq(9,ifelse(strlen(%q9),%q9,jobnum))][u(%va/FN_HASATTRP,%va,SORTBY_%q9)]=0*,@pemit %#=Permission denied.,10*,@pemit %#=Mismatched parentheses.,110*,@pemit %#=Syntax error.,1110,@pemit %#=Invalid sort type.,{@pemit %#=[u(%va/FN_JOBSHEADER,%#)];@dolist [setq(1,filter(%va/FIL_GOING,lcon(%va)))][u(%va/FN_S-INIT)][map(%va/MAP_PARSESTACK,%q0)][ifelse(%q8,revwords(sortby(%va/SORTBY_%q9,u(%va/FN_S-PEEK))),sortby(%va/SORTBY_%q9,u(%va/FN_S-PEEK)))]={@pemit %#=[ifelse(or(u(%va/FN_ACCESSCHECK,parent(##),%#,##),u(%va/FIL_MINE,##)),u(%va/FN_JOBLIST,##,%#),)];};@wait 0=@pemit %#=[u(%va/FN_FOOTER,* Denotes New Activity)]}
&CMD_JOBS/WHO [v(JOB_GO)]=$+jobs/who *:@switch [u(%va/HAS_ACCESS,%#)][setq(0,pmatch(trim(%0)))][or(match(trim(%0),none),isdbref(%q0))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#={There is no player by that name. Request must be by player or 'none'.}},{@pemit %#=[u(%va/FN_JOBSHEADER,%#)];@dolist [setq(1,switch(match(%0,none),0,%q0,))][u(%va/fn_trim,squish(iter(revwords(lcon(%va)),switch(u(%va/FIL_WHO,##,%q1),1,##))))]={@pemit %#=[ifelse(u(%va/FN_ACCESSCHECK,parent(##),%#,##),[u(%va/FN_JOBLIST,##,%#)],)]};@wait 0=@pemit %#=[u(%va/FN_FOOTER,* Denotes New Activity)];}
&CMD_MYJOB/ADD [v(JOB_GO)]=$+myjob/add *=*:@switch [not(haspower(%#,guest))][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][or(and(u(%va/IS_PUBLIC,%q0),match(get(%q0/OPENED_BY),%#)),u(%va/FN_MYACCESSCHECK,parent(%q0),%#,%q0),)][not(u(%va/FN_HASATTR,%q0,LOCKED))]=0*,@pemit %#=This command is not available to guests.,10*,@pemit %#=That is an invalid job number.,110*,@pemit %#=[name(%q0)] is not yours. You can only modify your own jobs.,1110*,@pemit %#=That job is locked and cannot be changed at this time.,{@pemit %#=Comments to [name(%q0)] added.;@trigger %va/TRIG_ADD=%q0,trim(%1),%#,ADD;@trigger %va/TRIG_BROADCAST=%q0,%#,ADD}
&CMD_MYJOB/SUMSET [v(JOB_GO)]=$+myjob/sumset */*=*:@switch [not(haspower(%#,guest))][isdbref(setr(0,u(%va/FN_FIND-JOB,%0)))][u(%va/FN_HASATTRP,%q0,MYACCESS_[trim(%1)])][and(u(%va/CONFIG_ACCESS,%#),u(%q0/MYACCESS_[trim(%1)],%#))][not(u(%va/IS_LOCKED,%q0,%#))][u(%q0/MYPROCESS_[trim(%1)],trim(%2),%q0,%#)]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=There is no such job. See '[ansi(h,+jobs)]' for a list of valid jobs.},110*,{@pemit %#='[trim(%1)]' is not a valid parameter. Valid parameters for [name(%q0)] are [u(%va/FN_ITEMIZE,map(%va/MAP_PARAMS,lattr(parent(%q0)/MYPROCESS_*)))].},1110*,{@pemit %#=You either can not use the +myjob/sumset command, or set that parameter.},11110*,{@pemit %#=That job is presently [ifelse(u(%va/FN_HASATTRP,%q0,CHECKOUT),checked out to%b[name(first(get(%q0/CHECKOUT)))],locked)]},111110*,{@pemit %#=[u(%q0/MYERROR_[trim(%1)]%q2)]},{@trigger %va/TRIG_BROADCAST=%q0,%#,MYS,[ucstr(trim(%1))];&%q3 %q0=%q1;@trigger %va/TRIG_ADD=%q0,[ucstr(trim(%1))] parameter updated to '[trim(%2)]',%#,MYS}
&CMD_MYJOB/VIEW [v(JOB_GO)]=$+myjob *:@switch [not(haspower(%#,guest))][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][or(u(%va/FN_MYACCESSCHECK,parent(%q0),%#,%q0),u(%va/IS_TRANSPARENT,%q0),and(get(%q0/PUBLIC),match(get(%q0/OPENED_BY),%#)))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job number.},110*,{@pemit %#=[name(%q0)] is not yours. You can only view your own jobs.},{@pemit %#=[u(%va/FN_READERS,%q0,%#,1)][u(%va/FN_HEADER,View [name(%q0)])]%r[u(%va/FN_MYBANNER,%q0)][ifelse(u(%va/FN_HASATTRP,%q0,MYSUMMARY),[ulocal(%va/FN_MYSUMMARY,%q0,%#)],)];@dolist [filter(%va/FIL_PUBLISHED,filter(%va/FIL_COMMENTS,sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*))))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};@wait 0=@pemit %#=[u(%va/FN_FOOTER)]}
&CMD_MYJOB/LAST [v(JOB_GO)]=$+myjob/last *=*:@switch [not(haspower(%#,guest))][setq(0,u(%va/FN_FIND-JOB,%0))][isdbref(%q0)][or(u(%va/FN_MYACCESSCHECK,parent(%q0),%#,%q0),u(%va/IS_TRANSPARENT,%q0),and(get(%q0/PUBLIC),match(get(%q0/OPENED_BY),%#)))]=0*,{@pemit %#=Permission denied.},10*,{@pemit %#=That is not a valid job number.},110*,{@pemit %#=[name(%q0)] is not yours. You can only view your own jobs.},{@pemit %#=[u(%va/FN_READERS,%q0,%#,1)][u(%va/FN_HEADER,View [name(%q0)])]%r[u(%va/FN_MYBANNER,%q0)][ifelse(u(%va/FN_HASATTRP,%q0,MYSUMMARY),[ulocal(%va/FN_MYSUMMARY,%q0,%#)],)];@dolist [extract(setr(1,filter(%va/FIL_PUBLISHED,filter(%va/FIL_COMMENTS,sortby(%va/SORTBY_COMMENTS,lattr(%q0/COMMENT_*))))),ifelse(lt(sub(words(%q1),trim(%1)),1),1,inc(sub(words(%q1),trim(%1)))),inc(trim(%1)))]={@pemit %#=[u(%va/FN_READJOB,##,%q0)]};@wait 0=@pemit %#=[u(%va/FN_FOOTER)]}
&CMD_MYJOBS [v(JOB_GO)]=$+myjobs:@switch [haspower(%#,guest)]=1,@pemit %#={Sorry, this command is not available to guests.},{@pemit %#=[u(%va/FN_MYJOBSHEADER,%#)];@dolist revwords(lcon(%va))={@pemit %#=[ifelse(or(u(%va/FN_MYACCESSCHECK,parent(##),%#,##),or(and(get([parent(##)]/PUBLIC),match(get(##/OPENED_BY),%#)),u(%va/IS_TRANSPARENT,##))),[u(%va/FN_MYJOBLIST,##,%#)],)]};@wait 0=@pemit %#=[u(%va/FN_FOOTER,[ansi(hr,*)] [ansi(hy,Denotes New Activity)])]}
&CMD_MYJOBS/CATCHUP [v(JOB_GO)]=$+myjobs/catchup:@pemit %#=You are now caught up on jobs.;&LAST_CONN %#=[secs()];@dolist lcon(%va)={think [u(%va/FN_READERS,##,%#)]}
&CMD_PITCH [v(JOB_GO)]=$+pitch *=*:@switch [not(haspower(%#,guest))]=0*,{@pemit %#=Permission Denied.},{@pemit %#=You have pitched your idea to staff about '[trim(secure(%0))]'. Please remember that this is merely an idea [ansi(hu,pitch)], and not a request. Staff, for one reason or many, may decide not to go with the idea.;@trigger %va/TRIG_CREATE=%#,u(%va/FN_FIND-BUCKET,PITCH),1,[u(%va/FN_STRTRUNC,trim(secure(%0)),30)],trim(%1),,,3}
&CMD_REQUEST [v(JOB_GO)]=$+request *=*:@switch [not(haspower(%#,guest))]=0*,{@pemit %#=Permission denied.},{@pemit %#=You have requested [secure(u(%va/FN_STRTRUNC,trim(%0),30))] from staff. Please allow for some time to process it. Do not page staff about it - you will hear back soon.;@trigger %va/TRIG_CREATE=%#,u(%va/FN_FIND-BUCKET,REQ),2,[u(%va/FN_STRTRUNC,trim(secure(%0)),30)],[u(%va/FN_STRTRUNC,trim(%1),get(%va/BUFFER))],,,2}
&CMD_TYPO [v(JOB_GO)]=$+typo *:@switch [not(haspower(%#,guest))]=0*,{@pemit %#=Permission denied.},{@pemit %#=You have notified production staff of the typo, with the details '[u(%va/FN_STRTRUNC,trim(%0),get(%va/BUFFER))]';@trigger %va/TRIG_CREATE=%#,u(%va/FN_FIND-BUCKET,BUILD),2,Typo Reported,[u(%va/FN_STRTRUNC,trim(%0),get(%va/BUFFER))],,,4}
&FIL_ISPLAYER [v(JOB_VA)]=switch(words(%0,:),1,or(hastype(%0,player),member(lcon(%vb),%0)),and(hastype(first(%0,:),player),strmatch(%0,u(%va/FN_OBJID,first(%0,:)))))
&FIL_NEW1 [v(JOB_VA)]=or(not(match(get(%0/LIST_JOBSN),%#|*)),gt(dec(get(%0/NUM_COMMENT)),last(grab(get(%0/LIST_JOBSN),%#|*),|)))
&FIL_NEWCOMMENTS1 [v(JOB_VA)]=gt(last(%0,_),last(grab(get(%q0/LIST_JOBSN),%#|*),|))
&FIL_NOTPLAYER [v(JOB_VA)]=not(u(FIL_ISPLAYER,%0))
&FIL_PUBLISHED [v(JOB_VA)]=or(u(%q0/PUBLISH),hasflag(%q0/%0,no_inherit),u(%va/FN_MYACCESSCHECK,parent(%q0),%#,%q0),strmatch(extract(get(%q0/%0),3,1,|),%#))
&FN_ACCESSCHECK [v(JOB_VA)]=and(u(%va/HAS_ACCESS,%1),or(u(%va/FN_WIZONLY,%1),band(add(elock(%0/speech,%1),gt(member(get(%1/JOBSB),u(FN_OBJID,%0)),0),ifelse(strlen(%2),gt(member(get(%2/JOBACCESS),u(FN_OBJID,%1)),0),0)),1)))
&FN_MYACCESSCHECK [v(JOB_VA)]=band(add(elock(%0/speech,%1),gt(member(get(%1/JOBSB),u(FN_OBJID,%0)),0),ifelse(strlen(%2),gt(member(get(%2/JOBACCESS),u(FN_OBJID,%1)),0),0)),1)
&FN_FIND-BUCKET [v(JOB_VA)]=localize(ifelse(or(strmatch(name(setr(0,locate(%vc,trim(%0),iT))),trim(%0)),strmatch(%q0,trim(%0))),%q0,#-1))
&FN_FIND-JGROUP [v(JOB_VA)]=localize(ifelse(or(strmatch(name(setr(0,locate(%vb,trim(%0),iT))),trim(%0)),strmatch(%q0,trim(%0))),%q0,#-1))
&FN_FIND-JOB [v(JOB_VA)]=localize(ifelse(or(strmatch(name(setr(0,locate(%va,Job [trim(%0)],iT))),Job [trim(%0)]),strmatch(%q0,trim(%0))),%q0,#-1))
&FN_OBJID [v(JOB_VA)]=localize(switch(1,and(isint(setr(0,convtime(ctime(%0)))),gt(%q0,0)),%0:%q0,and(isint(setr(0,convtime(createtime(%0)))),gt(%q0,0)),%0:%q0,%0))
&FN_READERS [v(JOB_VA)]=[ifelse(%2,set(%0,LIST_READERS:[setunion(setdiff(get(%0/LIST_READERS),grab(get(%0/LIST_READERS),%1|*)),%1|[dec(get(%0/NUM_COMMENT))])]),)][set(%0,LIST_JOBSN:[setunion(setdiff(get(%0/LIST_JOBSN),grab(get(%0/LIST_JOBSN),%1|*)),%1|[dec(get(%0/NUM_COMMENT))])])]
&REPORT_STATS [v(JOB_VA)]=[rjust(ansi(hc,Install:),20)]%b[get(%va/INSTALL_DATE)]%r[rjust(ansi(hc,Version:),20)]%bAnomaly Jobs [get(%va/VERSION)][space(5)]%r[rjust(ansi(hc,Release:),20)]%b[get(%va/RELEASE)]%r[rjust(ansi(hc,Memory:),20)]%b[setr(a,fold(%va/FOLD_ADD,iter(setr(b,[num(me)] [loc(me)] %vb %vc [lcon(%vc)] [lcon(me)]),objmem(##))))]%b%([round(fdiv(%qa,1024),1)]k in [words(%qb)] objects%)%r[rjust(ansi(hc,Open Jobs:),20)]%b[words(remove(lcon(%va),#-1))]%r[rjust(ansi(hc,Capacity:),20)]%b[u(%va/FN_PCT)]%% Full%r[rjust(ansi(hc,Next Job:),20)]%b[inc(u(%va/JOBS_NUM))]%r[rjust(ansi(hc,Buckets:),20)]%b[words(lcon(%vc))]%r[rjust(ansi(hc,Opened:),20)]%b[last(grab(get(%va/LIST_STATS),CRE|*),|)][setq(x,iter(APR DNY COM DEL,grab(get(%va/LIST_STATS),##|*)))][setq(y,map(%va/MAP_ACTIONS,%qx))]%r[rjust(ansi(hc,Closed:),20)]%b[fold(%va/FOLD_ADD,%qy,0)]%r[rjust(ansi(hc,Actions To Date:),20)]%b[fold(FOLD_ADD,map(MAP_ACTIONS,v(LIST_STATS)),0)]%r[rjust(ansi(hc,ART:),20)]%b[u(%va/FN_ART,%vc)][space(10)] ART=Average Resolution Time%r[rjust(ansi(hc,REQ ART:),20)]%b[u(%va/FN_ART,u(%va/FN_FIND-BUCKET,REQ))][space(18)]DD:HH:MM:SS%r[rjust(ansi(hc,CODE ART:),20)]%b[u(%va/FN_ART,u(%va/FN_FIND-BUCKET,CODE))]%r[rjust(ansi(hc,TPS ART:),20)]%b[u(%va/FN_ART,u(%va/FN_FIND-BUCKET,TPS))]%r[rjust(ansi(hc,BUILD ART:),20)]%b[u(%va/FN_ART,u(%va/FN_FIND-BUCKET,BUILD))]%r
&TRIG_ADD [v(JOB_VA)]=think [setq(0,default(%0/NUM_COMMENT,1))][setq(1,last(grab(get(%0/LIST_JOBSN),%2|*),|))][setq(2,edit(%1,|,@@PIPE@@))][ifelse(eq(dec(%q0),%q1),set(%0,LIST_JOBSN:[setunion(remove(get(%0/LIST_JOBSN),%2|%q1),%2|%q0)]),)][ulocal(FN_ADDSTAT,%3,%va)][ulocal(FN_ADDSTAT,%3,%0)][ulocal(FN_ADDSTAT,%3,parent(%0))];&COMMENT_%q0 %0=%3|[secs()]|%2|[name(%2)]|[ifelse(u(%va/FN_HASATTRP,parent(%0),ALETTER_%3),u(%va/FN_STRTRUNC,u([parent(%0)]/ALETTER_%3,%0,%2,%q2),get(%va/BUFFER)),u(%va/FN_STRTRUNC,%q2,get(%va/BUFFER)))];&NUM_COMMENT %0=[inc(%q0)];&MODIFIED_ON %0=[secs()];&MODIFIED_BY %0=%2;@trigger parent(%0)/HOOK_%3=%0,%2,[parent(%0)],%1;@trigger %va/TRIG_POST=%0,%3,%2,%1;@trigger %va/TRIG_MAIL=%0,%3,%2,%1
&TRIG_APPLY [v(JOB_VA)]=@trigger %va/TRIG_CREATE=%0,u(%va/FN_FIND-BUCKET,APPS),2,Application by [name(%0)],
&TRIG_CLEAN [v(JOB_VA)]=@dolist [lcon(%va)] [lcon(%vb)]={@switch [u(FN_CLEANFIND,##,OPENED_BY)][u(FN_CLEANFIND,##,ASSIGNED_TO)][u(FN_CLEANFIND,##,TAGGED_FOR)][u(FN_CLEANFIND,##,PLAYERS)][u(FN_CLEANFIND,##,WRITER)][u(FN_CLEANFIND,##,MEMBERLIST)][u(FN_CLEANFIND,##,JOBACCESS)]=1??????,{&OPENED_BY ##=U(FN_CLEANFIX,##,OPENED_BY)},?1?????,{&ASSIGNED_TO ##=U(FN_CLEANFIX,##,ASSIGNED_TO)},??1????,{&TAGGED_FOR ##=U(FN_CLEANFIX,##,TAGGED_FOR)},???1???,{&PLAYERS ##=U(FN_CLEANFIX,##,PLAYERS)},????1??,{&WRITER ##=U(FN_CLEANFIX,##,WRITER)},?????1?,{&MEMBERLIST ##=U(FN_CLEANFIX,##,MEMBERLIST)},??????1,{&JOBACCESS ##=U(FN_CLEANFIX,##,JOBACCESS)}};
&TRIG_CREATE [v(JOB_VA)]=@switch gte(u(%va/FN_PCT),100)=1,{@pemit %0=[ansi(hr,JOBS ERROR:)] Creation failed. The +jobs system is full. Contact staff immediately.;@trigger %va/TRIG_BROADCAST=%1,JOBS SYSTEM IS FULL! Please complete jobs or boost your MAX_JOBS configuration.},{think [setq(0,inc(u(%va/JOBS_NUM)))][setq(1,create(Job %q0,10))][setq(y,case(%7,1,CRE,OTH))];@tel %q1=%va;@link %q1=%va;&OPENED_BY %q1=[switch(%5,,%0,%5)];&OPENED_ON %q1=[secs()];&MODIFIED_ON %q1=[secs()];&STATUS %q1=1;&TITLE %q1=%3;@parent %q1=[u(%va/FN_FIND-BUCKET,%1)];&NUM_COMMENT %q1=2;&PRIORITY %q1=%2;&COMMENT_1 %q1=CRE|[secs()]|%0|[name(%0)]|[ifelse(u(%va/FN_HASATTRP,parent(%q1),ALETTER_%qy),u(%va/FN_STRTRUNC,u([parent(%q1)]/ALETTER_%qy,%q1,%0,edit(%4,|,@@PIPE@@)),get(%va/BUFFER)),u(%va/FN_STRTRUNC,edit(%4,|,@@PIPE@@),get(%va/BUFFER)))];&LIST_JOBSN %q1=%0|1;&ASSIGNED_TO %q1=%6;&JOBS_NUM %va=%q0;&DUE_ON %q1=[ifelse(u(%va/FN_HASATTRP,%q1,TURNAROUND),add(secs(),mul(60,60,get(%q1/TURNAROUND))),)];@trigger %va/TRIG_BROADCAST=%q1,%0,%qy,%3;@trigger %1/HOOK_%qy=%q1,%0,%1,%4;@trigger %va/TRIG_POST=%q1,%qy,%0,%4;@trigger %va/TRIG_MAIL=%q1,%qy,%0,%4;think [ulocal(FN_ADDSTAT,CRE,%va)][ulocal(FN_ADDSTAT,CRE,parent(%q1))];@switch gt(u(%va/FN_PCT),95)=1,{@trigger %va/TRIG_BROADCAST=%1,JOBS SYSTEM IS NEARING CAPACITY! Please complete jobs or boost your MAX_JOBS configuration.}}
&RELEASE [v(JOB_VA)]=December 16, 2010
&VERSION [v(JOB_VA)]=v6.2
&VERSION [v(JOB_VC)]=v6.2
@switch [v(JOB_PATCH)]=>0,{think [ansi(hc,ANOMALY JOBS:)] Updating special job access to unique player ID.;@dolist switch(first(version()),PennMUSH,lsearch(all,eplayers,\[hasattrval(##,JOBSB)\]),RhostMUSH,searchng(eplayer=hasattr(##,JOBSB)),search(eplayer=hasattr(##,JOBSB)))={think [name(##)] has access to buckets: [u([v(JOB_VA)]/FN_ITEMIZE,iter(get(##/JOBSB),name(first(itext(0),:)),|),|)];&JOBSB ##=iter(get(##/JOBSB),u([v(JOB_VA)]/FN_OBJID,first(itext(0),:)))}}
@switch [v(JOB_PATCH)]=>0,{think [ansi(hc,ANOMALY JOBS:)] Updating new job indicators.;@dolist lcon(v(JOB_VA))={&LIST_JOBSN ##=[get(##/LIST_READERS)];}}
@wait 10={think [ansi(hc,ANOMALY JOBS:)] Script complete. Thanks for using Anomaly Jobs! You should drop the Job Global Object <JGO> in the master room. If you have opened up the system to more than just ROYALTY and WIZARD, you must have #1 lock and hide the attribute LAST_CONN. You should hide & lock JOBSH and JOBSB no matter what. For example:%r%r@attribute/access JOBSB=WIZARD%r@attribute/access JOBSH=HIDDEN[switch(first(version()),PennMUSH,%r%(On PennMUSH\, you must use /retroactive and also add these to a wizard's @startup.%))];@set me=!quiet}
